#####################################################################
#  G Sensor definition
#####################################################################
##EBBCan##
#[adxl345]        
#cs_pin: host:None

#[adxl345 EBBCan]
#[adxl345]
#cs_pin: EBBCan: PB12
#spi_software_sclk_pin: EBBCan: PB10
#spi_software_mosi_pin: EBBCan: PB11
#spi_software_miso_pin: EBBCan: PB2
#axes_map: z,-y,x

#[adxl345 cart]
#cs_pin: scanner:PA3
#spi_bus: spi1
#axes_map: x,-y,-z


#[lis2dw]
#cs_pin: cartographer:PA3
#spi_bus: spi1
#axes_map: z,-y,x  #x,z,y

#[resonance_tester]
#accel_chip: lis2dw
#probe_points:
#    175, 175, 20



[adxl345 ebb]
cs_pin: EBBCan:gpio1
spi_software_sclk_pin: EBBCan:gpio2
spi_software_mosi_pin: EBBCan:gpio0
spi_software_miso_pin: EBBCan:gpio3
axes_map: z,-y,x

[adxl345]
cs_pin: scanner:PA3
spi_bus: spi1
axes_map: x,-y,-z


##  The SPI speed (in hz) to use when communicating with the chip.
##  The default is 5000000.
#spi_speed: 5000000
## Output data rate for ADXL345. ADXL345 supports the following data
##  rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
## not recommended to change this rate from the default 3200, and
##  rates below 800 will considerably affect the quality of resonance
##  measurements.
#rate: 3200
##  The accelerometer axis for each of the printer's x, y, and z axes.
##  This may be useful if the accelerometer is mounted in an
##  orientation that does not match the printer orientation. For
##  example, one could set this to "y,x,z" to swap the x and y axes.
##  It is also possible to negate an axis if the accelerometer
##  direction is reversed (eg, "x,z,-y"). The default is "x,y,z".
##  receck
#axes_map: x,y,z

#####################################################################
#  resonance tester definition
#####################################################################
[resonance_tester]
accel_chip: adxl345
#accel_chip: lis2dw
#accel_chip: adxl345 cart
##  A list of X,Y,Z coordinates of points (one point per line) to test
##  resonances at. At least one point is required. Make sure that all
##  points with some safety margin in XY plane (~a few centimeters)
##  are reachable by the toolhead.
probe_points:  
    175,175,20
#    175,175,160
#    175,175,300
##  Maximum input shaper smoothing to allow for each axis during shaper
##  auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
##  maximum smoothing is specified. Refer to Measuring_Resonances guide
##  for more details on using this feature.
#max_smoothing:
##  Minimum/Maximum frequency to test for resonances.
min_freq: 5
#max_freq: 133
##  This parameter is used to determine which acceleration to use to
##  test a specific frequency: accel = accel_per_hz * freq. Higher the
##  value, the higher is the energy of the oscillations. Can be set to
##  a lower than the default value if the resonances get too strong on
##  the printer. However, lower values make measurements of
##  high-frequency resonances less precise. The default value is 75
##  (mm/sec).
accel_per_hz: 75
##  Determines the speed of the test. When testing all frequencies in
##  range [min_freq, max_freq], each second the frequency increases by
##  hz_per_sec. Small values make the test slow, and the large values
##  will decrease the precision of the test. The default value is 1.0
##  (Hz/sec == sec^-2).
hz_per_sec: 1

#####################################################################
#  input shaper  definition
#####################################################################
[input_shaper]
##  A frequency (in Hz) of the input shaper for X or Y axis. 
shaper_freq_x: 52.8  #39.0 ebbcan
shaper_freq_y: 42.0  #28.8 ebbcan
##  A type of the intput shaper for X or Y axia.
shaper_type_x: ei
shaper_type_y: ei
##  Damping ratios of vibrations of X and Y axes used by input shapers
##  to improve vibration suppression. Default value is 0.1 which is a
##  good all-round value for most printers. In most circumstances this
##  parameter requires no tuning and should not be changed.
damping_ratio_x: 0.063  #0.053 ebbcan
damping_ratio_y: 0.047  #0.061 ebbcan

#[gcode_macro TEST_RESONANCES]
#rename_existing: BASE_TEST_RESONANCES
#description: Runs input shaper test at the center of the bed
#gcode:
#    {% set Tx, Ty = printer["gcode_macro _USER_VARIABLES"].resonnance_test_point_xy|map('float') %}
#    {% set Tz = printer["gcode_macro _USER_VARIABLES"].resonnance_test_z_clearance|float %}
#
#    {% if Tx == -1 and Ty == -1 %}
#        {% set max_x = printer.toolhead.axis_maximum.x|float %}
#        {% set max_y = printer.toolhead.axis_maximum.y|float %}

#        BASE_TEST_RESONANCES POINT={max_x / 2},{max_y / 2},{Tz} {rawparams} 
#    {% else %}
#        BASE_TEST_RESONANCES POINT={Tx},{Ty},{Tz} {rawparams}
#    {% endif %}

[shaketune]
 result_folder: ~/printer_data/config/ShakeTune_results
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
 number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
# keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
 show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
 timeout: 300  #600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
# measurements_chunk_size: 2
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
# max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
# dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.

#[gcode_macro _set_zone_core_xy]
#gcode:
#    {% set X_pos = printer.gcode_move.gcode_position.x %}
#    {% set Y_pos = printer.gcode_move.gcode_position.y %}
#    {% set Z_pos = printer.gcode_move.gcode_position.z %}
#    {% if X_pos >=0 and X_pos < 325 / 2 and Y_pos >=0 and Y_pos < 325 / 2 %}
#        SET_INPUT_SHAPER SHAPER_TYPE_X=3HUMP_EI SHAPER_TYPE_Y=MZV SHAPER_FREQ_X=48.6 SHAPER_FREQ_Y=46.2
#    {% elif X_pos >= 325 / 2 and Y_pos >=0 and Y_pos < 325 / 2 %}
#        SET_INPUT_SHAPER SHAPER_TYPE_X=EI SHAPER_TYPE_Y=mzv SHAPER_FREQ_X=44.6 SHAPER_FREQ_Y=44.4
#    {% elif X_pos >=0 and X_pos < 325 / 2 and Y_pos >= 325 / 2 %}
#        SET_INPUT_SHAPER SHAPER_TYPE_X=3HUMP_EI SHAPER_TYPE_Y=MZV SHAPER_FREQ_X=49.6 SHAPER_FREQ_Y=46.6
#    {% elif X_pos >= 325 / 2 and Y_pos >= 325 / 2 %}
#        SET_INPUT_SHAPER SHAPER_TYPE_X=EI SHAPER_TYPE_Y=MZV SHAPER_FREQ_X=44.4 SHAPER_FREQ_Y=45.2
#    {% endif %}
